/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Interface;

import Model.ConnectionSQLdb;
import java.awt.BorderLayout;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Marcelle F
 */
public class ManageRegister extends javax.swing.JPanel {

    /**
     * Creates new form ManageRegister
     */
public ManageRegister() {
    initComponents(); // Inicializa los componentes del panel
    loadRolesToComboBox(); // Cargar los roles en el ComboBox
    loadCoursesData(null, null);
    if (panelCourses != null) {
        panelCourses.setBackground(new Color(234, 203, 234, 75));
        panelCourses.setOpaque(true);
    }
    
    loadCoursesData(); // Cargar los datos en la tabla al inicializar
    

}



    
        public void loadCoursesData() {
    DefaultTableModel model = (DefaultTableModel) tableCourses.getModel();
    model.setRowCount(0); // Limpiar la tabla antes de cargar los datos

    String query = "SELECT Identificacion, Nombre, Apellido1, Apellido2, Rol, Nombre_usuario, " +
                   "Telefono_principal, Teléfono_secundario, Correo, Contrasena, Provincia, " +
                   "Canton, Distrito, Genero, Fecha_nacimiento, Edad FROM Usuarios"; // Ajusta el nombre de la tabla si es necesario

    try (Connection conn = new ConnectionSQLdb().getConnection();
         PreparedStatement stmt = conn.prepareStatement(query);
         ResultSet rs = stmt.executeQuery()) {

        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getString("Identificacion"),
                rs.getString("Nombre"),
                rs.getString("Apellido1"),
                rs.getString("Apellido2"),
                rs.getString("Rol"),
                rs.getString("Nombre_usuario"),
                rs.getString("Telefono_principal"),
                rs.getString("Teléfono_secundario"),
                rs.getString("Correo"),
                rs.getString("Contrasena"),
                rs.getString("Provincia"),
                rs.getString("Canton"),
                rs.getString("Distrito"),
                rs.getString("Genero"),
                rs.getDate("Fecha_nacimiento"), // Si es de tipo DATE en la base de datos
                rs.getInt("Edad")
            });
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al cargar los datos: " + e.getMessage());
    }
     }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelCourses = new javax.swing.JPanel();
        searchC = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCourses = new javax.swing.JTable();
        btnEditCourse = new javax.swing.JButton();
        btnDeleteCourse = new javax.swing.JButton();
        comboCourses = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        panelCourses.setBackground(new java.awt.Color(255, 211, 255));
        panelCourses.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchC.setBorder(null);
        searchC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCActionPerformed(evt);
            }
        });
        panelCourses.add(searchC, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 520, 40));

        tableCourses.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        tableCourses.setForeground(new java.awt.Color(87, 73, 98));
        tableCourses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Identificacion", "Nombre", "Apellido1", "Apellido2", "Rol", "Nombre_usuario", "Teléfono_principal", "Teléfono_secundario", "Correo", "Contrasena", "Provincia", "Canton", "Distrito", "Genero", "Fecha_nacimiento", "Edad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCourses.setSelectionBackground(new java.awt.Color(234, 203, 234));
        tableCourses.setSelectionForeground(new java.awt.Color(87, 73, 98));
        jScrollPane1.setViewportView(tableCourses);

        panelCourses.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 630, 400));

        btnEditCourse.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        btnEditCourse.setText("Editar");
        btnEditCourse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditCourseMouseClicked(evt);
            }
        });
        btnEditCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditCourseActionPerformed(evt);
            }
        });
        panelCourses.add(btnEditCourse, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 120, 90, -1));

        btnDeleteCourse.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        btnDeleteCourse.setText("Eliminar");
        btnDeleteCourse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDeleteCourseMouseClicked(evt);
            }
        });
        btnDeleteCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCourseActionPerformed(evt);
            }
        });
        panelCourses.add(btnDeleteCourse, new org.netbeans.lib.awtextra.AbsoluteConstraints(537, 120, 90, -1));

        comboCourses.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        comboCourses.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Arte", "Actividad física", "Salud y Bienestar", "Tecnología", "Medio ambiente" }));
        comboCourses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCoursesActionPerformed(evt);
            }
        });
        panelCourses.add(comboCourses, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 120, -1));

        btnSearch.setBackground(new java.awt.Color(204, 204, 255));
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-search-more-24.png"))); // NOI18N
        btnSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSearchMouseClicked(evt);
            }
        });
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        panelCourses.add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 30, -1, -1));

        jButton1.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        jButton1.setText("Registrar");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        panelCourses.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 120, 90, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(panelCourses, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(panelCourses, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tableCoursesMouseClicked(java.awt.event.MouseEvent evt) {                                         
    int selectedRow = tableCourses.getSelectedRow();
    if (selectedRow != -1) {
        // Obtener los valores de la fila seleccionada
        String id = (String) tableCourses.getValueAt(selectedRow, 0); // Identificación
        String name = (String) tableCourses.getValueAt(selectedRow, 1); // Nombre
        String lastName1 = (String) tableCourses.getValueAt(selectedRow, 2); // Apellido1
        String lastName2 = (String) tableCourses.getValueAt(selectedRow, 3); // Apellido2
        String role = (String) tableCourses.getValueAt(selectedRow, 4); // Rol
        String username = (String) tableCourses.getValueAt(selectedRow, 5); // Nombre_usuario
        String tel1 = (String) tableCourses.getValueAt(selectedRow, 6); // Teléfono_principal
        String tel2 = (String) tableCourses.getValueAt(selectedRow, 7); // Teléfono_secundario
        String email = (String) tableCourses.getValueAt(selectedRow, 8); // Correo
        String password = (String) tableCourses.getValueAt(selectedRow, 9); // Contraseña
        String province = (String) tableCourses.getValueAt(selectedRow, 10); // Provincia
        String canton = (String) tableCourses.getValueAt(selectedRow, 11); // Cantón
        String district = (String) tableCourses.getValueAt(selectedRow, 12); // Distrito
        String gender = (String) tableCourses.getValueAt(selectedRow, 13); // Género
        String birthdate = tableCourses.getValueAt(selectedRow, 14).toString(); // Fecha de nacimiento
        String age = tableCourses.getValueAt(selectedRow, 15).toString(); // Edad

        // Crear una instancia del panel EditRegister y cargar los datos
        EditRegister editPanel = new EditRegister();
        editPanel.loadCourseDataToForm(name, age, birthdate, canton, district, email, gender, id, lastName1, lastName2, password, province, role, tel1, tel2, username);

        // Reemplazar el contenido del panel principal con el panel de edición
        this.removeAll();
        this.setLayout(new BorderLayout());
        this.add(editPanel, BorderLayout.CENTER);
        this.revalidate();
        this.repaint();
    }
}                           
    
    

    
    private void searchCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchCActionPerformed

    private void btnEditCourseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditCourseMouseClicked
   int selectedRow = tableCourses.getSelectedRow();
    if (selectedRow != -1) {
        // Crear una instancia del panel de edición
        EditRegister editRegisterPanel = new EditRegister();

        // Pasar los datos de la fila seleccionada al panel de edición
        editRegisterPanel.loadCourseDataToForm(
            tableCourses.getValueAt(selectedRow, 1).toString(),  // Nombre
            tableCourses.getValueAt(selectedRow, 15).toString(), // Edad
            tableCourses.getValueAt(selectedRow, 14).toString(), // Fecha de nacimiento
            tableCourses.getValueAt(selectedRow, 11).toString(), // Cantón
            tableCourses.getValueAt(selectedRow, 12).toString(), // Distrito
            tableCourses.getValueAt(selectedRow, 8).toString(),  // Correo
            tableCourses.getValueAt(selectedRow, 13).toString(), // Género
            tableCourses.getValueAt(selectedRow, 0).toString(),  // Identificación
            tableCourses.getValueAt(selectedRow, 2).toString(),  // Apellido1
            tableCourses.getValueAt(selectedRow, 3).toString(),  // Apellido2
            tableCourses.getValueAt(selectedRow, 9).toString(),  // Contraseña
            tableCourses.getValueAt(selectedRow, 10).toString(), // Provincia
            tableCourses.getValueAt(selectedRow, 4).toString(),  // Rol
            tableCourses.getValueAt(selectedRow, 6).toString(),  // Teléfono principal
            tableCourses.getValueAt(selectedRow, 7).toString(),  // Teléfono secundario
            tableCourses.getValueAt(selectedRow, 5).toString()   // Nombre de usuario
        );

        // Mostrar el panel de edición en un JFrame
        JFrame editFrame = new JFrame("Editar Registro");
        editFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        editFrame.add(editRegisterPanel);
        editFrame.setSize(700, 600); // Ajustar tamaño según sea necesario
        editFrame.setLocationRelativeTo(null); // Centrar ventana
        editFrame.setVisible(true);
    } else {
        JOptionPane.showMessageDialog(this, "Seleccione una fila para editar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_btnEditCourseMouseClicked

    private void btnDeleteCourseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteCourseMouseClicked

    }//GEN-LAST:event_btnDeleteCourseMouseClicked

    private void comboCoursesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCoursesActionPerformed
                                             
    String searchTerm = searchC.getText(); // Obtener el texto del campo de búsqueda
    String courseFilter = (String) comboCourses.getSelectedItem(); // Obtener el filtro del ComboBox

    // Cargar los datos filtrados
    loadCoursesData(searchTerm, courseFilter);
    }//GEN-LAST:event_comboCoursesActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnDeleteCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCourseActionPerformed
                                               
    // Obtener la fila seleccionada
    int selectedRow = tableCourses.getSelectedRow();

    if (selectedRow != -1) {
        // Obtener el valor de la columna "Identificacion" de la fila seleccionada
        String identificacion = (String) tableCourses.getValueAt(selectedRow, 0);

        // Confirmar la eliminación con el usuario
        int confirm = JOptionPane.showConfirmDialog(this, 
            "¿Está seguro de que desea eliminar este registro?", 
            "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection conn = new ConnectionSQLdb().getConnection();
                 PreparedStatement stmt = conn.prepareStatement("DELETE FROM Usuarios WHERE Identificacion = ?")) {

                // Configurar el identificador para la eliminación
                stmt.setString(1, identificacion);

                // Ejecutar el DELETE
                int rowsAffected = stmt.executeUpdate();

                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Registro eliminado correctamente.");
                    
                    // Recargar los datos en la tabla
                    loadCoursesData();
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo eliminar el registro.", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al eliminar el registro: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Seleccione una fila para eliminar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
    }

    }//GEN-LAST:event_btnDeleteCourseActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
       Register registerPanel = new Register();
    JFrame editFrame = new JFrame("Editar Registro");
        editFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        editFrame.add(registerPanel);
        editFrame.setSize(700, 600); // Ajustar tamaño según sea necesario
        editFrame.setLocationRelativeTo(null); // Centrar ventana
        editFrame.setVisible(true);
    }//GEN-LAST:event_jButton1MouseClicked

    private void btnEditCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditCourseActionPerformed

    }//GEN-LAST:event_btnEditCourseActionPerformed

    private void btnSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchMouseClicked
           String searchTerm = searchC.getText(); // Obtener el texto del campo de búsqueda
    String courseFilter = (String) comboCourses.getSelectedItem(); // Obtener el filtro del ComboBox

    // Cargar los datos filtrados
    loadCoursesData(searchTerm, courseFilter);
    }//GEN-LAST:event_btnSearchMouseClicked

    
    
   private void loadRolesToComboBox() {
    comboCourses.removeAllItems(); // Limpiar el ComboBox
    comboCourses.addItem("Todos"); // Agregar opción predeterminada

    String query = "SELECT DISTINCT Rol FROM Usuarios";

    try (Connection conn = new ConnectionSQLdb().getConnection();
         PreparedStatement stmt = conn.prepareStatement(query);
         ResultSet rs = stmt.executeQuery()) {

        while (rs.next()) {
            comboCourses.addItem(rs.getString("Rol"));
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al cargar los roles: " + e.getMessage());
    }
}
 
    
    public void loadCoursesData(String searchTerm, String courseFilter) {
    DefaultTableModel model = (DefaultTableModel) tableCourses.getModel();
    model.setRowCount(0); // Limpiar la tabla antes de cargar los datos

    // Construir la consulta con parámetros opcionales
    StringBuilder queryBuilder = new StringBuilder(
        "SELECT Identificacion, Nombre, Apellido1, Apellido2, Rol, Nombre_usuario, " +
        "Telefono_principal, Teléfono_secundario, Correo, Contrasena, Provincia, " +
        "Canton, Distrito, Genero, Fecha_nacimiento, Edad FROM Usuarios"
    );

    boolean hasFilter = false;

    if (searchTerm != null && !searchTerm.isEmpty()) {
        queryBuilder.append(" WHERE (Nombre LIKE ? OR Identificacion LIKE ? OR Apellido1 LIKE ?)");
        hasFilter = true;
    }

    if (courseFilter != null && !courseFilter.equalsIgnoreCase("Todos")) {
        queryBuilder.append(hasFilter ? " AND " : " WHERE ");
        queryBuilder.append("Rol = ?");
    }

    try (Connection conn = new ConnectionSQLdb().getConnection();
         PreparedStatement stmt = conn.prepareStatement(queryBuilder.toString())) {

        int paramIndex = 1;

        // Agregar parámetros de búsqueda
        if (searchTerm != null && !searchTerm.isEmpty()) {
            stmt.setString(paramIndex++, "%" + searchTerm + "%");
            stmt.setString(paramIndex++, "%" + searchTerm + "%");
            stmt.setString(paramIndex++, "%" + searchTerm + "%");
        }

        // Agregar parámetros de filtro de curso
        if (courseFilter != null && !courseFilter.equalsIgnoreCase("Todos")) {
            stmt.setString(paramIndex++, courseFilter);
        }

        ResultSet rs = stmt.executeQuery();

        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getString("Identificacion"),
                rs.getString("Nombre"),
                rs.getString("Apellido1"),
                rs.getString("Apellido2"),
                rs.getString("Rol"),
                rs.getString("Nombre_usuario"),
                rs.getString("Telefono_principal"),
                rs.getString("Teléfono_secundario"),
                rs.getString("Correo"),
                rs.getString("Contrasena"),
                rs.getString("Provincia"),
                rs.getString("Canton"),
                rs.getString("Distrito"),
                rs.getString("Genero"),
                rs.getDate("Fecha_nacimiento"),
                rs.getInt("Edad")
            });
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al cargar los datos: " + e.getMessage());
    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnDeleteCourse;
    public javax.swing.JButton btnEditCourse;
    public javax.swing.JButton btnSearch;
    public javax.swing.JComboBox<String> comboCourses;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelCourses;
    private javax.swing.JTextField searchC;
    public javax.swing.JTable tableCourses;
    // End of variables declaration//GEN-END:variables
}
